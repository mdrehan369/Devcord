// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String     @id @default(cuid())

  githubId        String?    @unique
  username        String?    @unique

  email           String     @unique
  emailVerified   DateTime?
  name            String?
  github_token    String?
  image           String?
  banner          String?
  bio             String?

  role            Role      @default(USER)

  accounts        Account[]
  projects        Project[]
  conversations   UserConversation[]
  messages        Message[]
  reactions       Reaction[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([id, username])
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

enum Role {
  USER
  ADMIN
}


// WIP: isPublic and if yes then user will require to ask for access to join project
model Project {
  id          String     @id @default(cuid())
  name        String
  description String?
  icon        String?
  banner      String?
  repo        String  @unique


  ownerId String
  owner   User   @relation(fields: [ownerId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Conversation {
  id              String          @id @default(cuid())
  name            String?
  isPersonal      Boolean         @default(false)
  isDM            Boolean         @default(false)

  messages        Message[]
  users           UserConversation[]

  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
}

model UserConversation {
  userId          String
  conversationId  String
  joinedAt        DateTime        @default(now())

  user            User            @relation(fields: [userId], references: [id])
  conversation    Conversation    @relation(fields: [conversationId], references: [id])

  @@id([userId, conversationId])
  @@unique([userId, conversationId])
}

model Message {
  id              String             @id @default(cuid())
  content         String?
  senderId        String?
  conversationId  String

  prevSender      String? // to combine msg from same sender
  prevCreatedAt   DateTime? // to combine msg from same sender

  fileUrl         String?
  duration        Int?
  systemData      String?

  type            MessageType
  sender          User?            @relation(fields: [senderId], references: [id])
  conversation    Conversation    @relation(fields: [conversationId], references: [id])
  reactions       Reaction[]

  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  @@index([conversationId, createdAt, prevSender])
}

enum MessageType {
  TEXT
  VOICE_NOTE
  IMAGE
  VIDEO
  FILE
  SYSTEM
}


model Reaction {
  id        Int      @id @default(autoincrement())
  emoji     String
  messageId String
  message   Message @relation(fields: [messageId], references: [id])
  userId    String
  user      User    @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
}
