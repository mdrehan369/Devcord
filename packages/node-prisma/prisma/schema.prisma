// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(cuid())

  githubId String? @unique
  username String? @unique

  email         String    @unique
  emailVerified DateTime?
  name          String?
  github_token  String?
  image         String?
  banner        String?
  bio           String?

  role UserRole @default(USER)

  dmAdmin       Conversation[]
  accounts      Account[]
  projects      Project[]
  conversations UserConversation[]
  messages      Message[]
  reactions     Reaction[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([id, username])
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

enum UserRole {
  USER
  ADMIN
}

// WIP: isPublic and if yes then user will require to ask for access to join project
model Project {
  id          String  @id @default(cuid())
  name        String
  description String?
  icon        String?
  banner      String?
  repo        String? @unique

  categories Category[]

  channels Channel[] // channels that are not in any category
  roles    Role[]

  ownerId String
  owner   User   @relation(fields: [ownerId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id    String @id @default(cuid())
  name  String
  order Int?

  project   Project @relation(fields: [projectId], references: [id])
  projectId String

  channels Channel[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Channel {
  id          String      @id @default(cuid())
  name        String
  description String?
  channelType ChannelType

  project   Project @relation(fields: [projectId], references: [id])
  projectId String

  category   Category? @relation(fields: [categoryId], references: [id])
  categoryId String?

  conversations Conversation?

  allowedRoles Role[]

  forumLayout ForumLayout?

  order Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Role {
  id    String  @id @default(cuid())
  name  String
  color String?

  project   Project @relation(fields: [projectId], references: [id])
  projectId String

  allowedChannels Channel[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum ForumLayout {
  DEFAULT
  COMPACT
  GRID
}

enum ChannelType {
  RULES
  TEXT
  TEXT_LIMITED
  TEXT_ACTIVE_THREAD
  TEXT_THREAD_PRIVATE
  VOICE
  VOICE_LIMITED
  ANNOUNCEMENT
  ANNOUNCEMENT_LIMITED
  STAGE
  FORUM
  FORUM_LIMITED
  VIDEO
}

model Conversation {
  id         String           @id @default(cuid())
  name       String?
  type       ConversationType
  nameEdited DateTime?

  admins User[] // only for DM and GROUP_DM
  users  UserConversation[] // only for DM and GROUP_DM

  messages  Message[]
  threads   Message[] @relation("ThreadConversation")
  channel   Channel?  @relation(fields: [channelId], references: [id])
  channelId String?   @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum ConversationType {
  DM
  GROUP_DM
  CHANNEL
}


// Consider if you want to track any role/permission or status per conversation (for example, muted status, custom nicknames, etc.). That can be added to this join model later if needed.
model UserConversation {
  userId         String
  conversationId String
  joinedAt       DateTime @default(now())

  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@id([userId, conversationId])
}

// WIP: create schema for invite token

model Message {
  id             String  @id @default(cuid())
  content        String?
  senderId       String?
  conversationId String

  replyToId            String?
  threadConversationId String?

  prevSender    String? // to combine msg from same sender
  prevCreatedAt DateTime? // to combine msg from same sender

  fileUrl    String?
  duration   Int?
  systemData String?

  type               MessageType
  sender             User?         @relation(fields: [senderId], references: [id])
  conversation       Conversation  @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  reactions          Reaction[]
  replyTo            Message?      @relation("ReplyTo", fields: [replyToId], references: [id])
  replies            Message[]     @relation("ReplyTo")
  threadConversation Conversation? @relation("ThreadConversation", fields: [threadConversationId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  editedAt  DateTime?

  @@index([conversationId, prevSender])
}

enum MessageType {
  TEXT
  VOICE_NOTE
  IMAGE
  VIDEO
  FILE
  SYSTEM
}

model Reaction {
  id        Int      @id @default(autoincrement())
  emoji     String
  messageId String
  message   Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
}
